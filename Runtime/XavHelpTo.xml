<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XavHelpTo</name>
    </assembly>
    <members>
        <member name="T:XavHelpTo.Supply">
            <summary>
            Herramienta para las funciones principales ó más frecuentes
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Assign``1(``0,``0@)">
            <summary>
            //Tesst
            Assign a value and returns it
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Component``2(``0,``1@,System.Boolean)">
            <summary>
            Get the type of the gameobject selected
            Returns the value if a value was taken
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Components``1(UnityEngine.Transform,``0[]@)">
            <summary>
            Return the specified components childs of the first level in order from the transform target
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.ClearChilds(UnityEngine.Transform)">
            <summary>
            Remove all the childs
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Singleton``1(``0,``0@,System.Boolean)">
            <summary>
            Check the status of a static reference of <typeparamref name="T"/> as a Singleton
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Lenght``1">
            <summary>
            Returns the lenght of a enum
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.PercentOf(System.Single,System.Single,System.Boolean)">
            <summary>
             Saca el porcentaje de la cantidad y el maximo en caso de tener
            </summary>
            <returns>El porcentaje de count sobre el max</returns>
        </member>
        <member name="M:XavHelpTo.Supply.QtyOf(System.Int32,System.Single,System.Boolean)">
            <summary>
            Basado en el porcentaje obtienes el valor mediante un maximo establecido
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Print``1(``0,System.String)">
            <summary>
            Debugs a thing, but you still using the chain to know things...
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Else``1(``0,``0)">
            <summary>
            Sustituto de ?? ya que es para versio 9.0 ?
            Returns the data initial or else the else data if is null
            </summary>
        </member>
        <member name="M:XavHelpTo.Supply.Positions(UnityEngine.Transform[])">
            <summary>
            returns the positions of each reference <seealso cref="T:UnityEngine.Transform"/>
            </summary>
        </member>
        <member name="T:XavHelpTo.Get.Get">
            <summary>
            Herramienta de obtención de valores
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.Types(System.Object[])">
            <summary>
            Gets all the types of the objects
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ComponentsWithoutOrder``1(UnityEngine.GameObject,``0[]@)">
            <summary>
            Returns the components of this gameobject without any order
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ComponentsInChilds``1(UnityEngine.GameObject,``0[]@)">
            <summary>
            Returns the components of this object and this component object whether it have 
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ChildWithTag(UnityEngine.Transform,System.String,UnityEngine.Transform@)">
            <summary>
            Assign the value if is finded, else null
            <para>Returns true if it was finded</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ScreenWidth(System.Single)">
            <summary>
            Devuelve el ancho del porcentaje para conocerlo basado en la pantalla
            <para>Usa <seealso cref="!:KnowPercentOfMax(float, float)"/></para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ScreenHeight(System.Single)">
            <summary>
            Devuelve el ancho del porcentaje para conocerlo basado en la pantalla
            <para>Usa <seealso cref="!:KnowPercentOfMax(float, float)"/></para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ScreenSize(UnityEngine.Vector2)">
            <summary>
            Devuelve el ancho y alto del vector de porcentaje basado enla pantalla
            <para>Usa <seealso cref="!:GetWidthOf(float)"/> y <seealso cref="!:GetHeightOf(float)"/></para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.RectScreen">
            <returns>The screen in pixels</returns>
        </member>
        <member name="M:XavHelpTo.Get.Get.ScreenHeightUnit(UnityEngine.Camera)">
            <summary>
            sacas el alto de una camara o la camara activa por defecto
            </summary>
            <para>Dependencia con <seealso cref="T:UnityEngine.Camera"/> </para>
            <returns>el alto de <seealso cref="T:UnityEngine.Camera"/> en unidades de Unity</returns>
        </member>
        <member name="M:XavHelpTo.Get.Get.ScreenWidthUnit(System.Single)">
            <summary>
            Sacas el ancho de la pantalla basado en el alto de la camara 
            <para>Dependencia con <seealso cref="T:UnityEngine.Screen"/> </para>
            </summary>
            <returns>el Ancho de <seealso cref="T:UnityEngine.Camera"/> en unidades Unity</returns>
        </member>
        <member name="M:XavHelpTo.Get.Get.Range(System.Single[])">
            <summary>
            Obtienes el valor del rango dado 
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.MinusMax(System.Single)">
            <summary>
            Returns a random value between the limits possitive and negative
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.ZeroMax(System.Int32)">
            <summary>
            Tomas el valor entre el 0 y el maximo
            </summary>
            <returns></returns>
        </member>
        <member name="M:XavHelpTo.Get.Get.ZeroMax``1(System.Int32[])">
            <summary>
            Take the val between 0 and max, you can also ignore some indexs
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.Min(System.Single,System.Single)">
            <returns>A value with the minimal or else the value</returns>
        </member>
        <member name="M:XavHelpTo.Get.Get.Limit(System.Single,System.Single,System.Single)">
            <summary>
            Shows the limit of the value
            <para>set a range <see cref="M:XavHelpTo.Get.Get.Min(System.Single,System.Single)"/> <see cref="M:XavHelpTo.Get.Get.Max(System.Single,System.Single)"/>, the max can be the <paramref name="range"/> or the <paramref name="limit"/> in case to be declared</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.Default``1(``0,``0@)">
            <summary>
            Coloca el valor puesto en caso de que sea null
            </summary>
        </member>
        <member name="M:XavHelpTo.Get.Get.SummAll(System.Single[])">
            <summary>
            Sumamos los valores de un arreglo
            </summary>
        </member>
        <member name="P:XavHelpTo.Get.Get.RandomBool">
            <summary>
            Gets a random boolean
            </summary>
        </member>
        <member name="T:XavHelpTo.Set.Set">
            <summary>
            Herramienta para modificación del valor,devolviendo los cambios hechos al valor
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.Push``1(``0,``0[])">
            <summary>
            Añade un string a un arreglo de strings.
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.PushIn``1(``0,``0[])">
            <summary>
            Pushes the array with the news values in the last
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.NewIn``1(System.Int32,``0[]@)">
            <summary>
            Creas una nueva dimension de arreglo del tipo que desees
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.Positive(System.Single)">
            <summary>
            Asignas el valor a positivo en caso de ser negativo
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.InUnitBounds(System.Single)">
            <summary>
            Obtenemos el valor dentro de los limites de la unidad de 0 y 1
            <para>tambien puede psoeer decimales</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.Join(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Une los caracteres de un arreglo de caracteres , puediendo añadir indices de inicio y fin
            <para>se puede implementar un texto inicial</para>
            </summary> 
        </member>
        <member name="M:XavHelpTo.Set.Set.ColorParam(UnityEngine.Color,System.Int32,System.Single)">
            <summary>
            Buscamos el parametro del <see cref="T:UnityEngine.Color"/> que vas a cambiar
            <para>  el parametro debe estar entre los rangos de los parametros de color</para>
            <para>  [R == 0,G == 1,B == 2,A == 3] --> iniciando en 0.</para>
            <para>   Si i es == -1 entonces aplica a (RGB)</para>
            <para>Dependencia con <seealso cref="T:UnityEngine.Color"/> </para>
            </summary>
            <returns>Devuelve el <see cref="T:UnityEngine.Color"/> con los cambios</returns>
        </member>
        <member name="M:XavHelpTo.Set.Set.Length(System.Int32[]@,System.Int32)">
            <summary>
            Actualizamos el arreglo para que posea el mismo tamaño que el nuevo,
            estos cambios pueden eliminar o añadir huecos, los nuevos iniciarán en 0
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.UnitInTime(System.Single,System.Single,System.Single)">
            <summary>
            conocemos el valor cambiando en un tiempo
            <para>
            si este valor se sobrepasa entre 0 y 1 los ajusta
            </para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.FillWith``1(``0,``0[]@)">
            <summary>
            Llenamos un arreglo con el valor escogido
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.DifferentIndexInEquals(System.Int32[],System.Int32)">
            <summary>
            Cambiamos los valores que son iguales de su mismo arreglo, cambiandolos con alguno entre el maximo
            <para> Devuelve un arreglo con los valores pero distintos en caso de encontrar repetidos</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Set.Set.Round(System.Single[])">
            <summary>
            Rounds the values
            </summary>
        </member>
        <member name="T:XavHelpTo.Change.Change">
            <summary>
            Herramienta para la alteración de cosas
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.SceneTo(System.Int32)">
            <summary>
            Cambiamos a la escena indicada en numerico
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XavHelpTo.Change.Change.ActiveObject(UnityEngine.GameObject@,System.Boolean)">
            <summary>
            Activa o desactiva el <seealso cref="T:UnityEngine.GameObject"/> basado en una condición
            <para>Dependencia con <seealso cref="T:UnityEngine.GameObject"/> </para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ActiveObjectsExcept(UnityEngine.GameObject[]@,System.Int32)">
            <summary>
            Activa unicamente el objeto indicado del arreglo
            <para>Por defecto el indice es el primero del arreglo</para>
            <para>Dependencia con <seealso cref="!:ObjOnOff(GameObject, bool)"/> </para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ActiveObjects``1(``0[],System.Boolean)">
            <summary>
            Active o Disable all the objects
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ActiveParticle(UnityEngine.ParticleSystem,System.Boolean)">
            <summary>
            Dependiendo de la condición determinamos si iniciar o apagar la animación
            <para>Dependencia con <seealso cref="T:UnityEngine.ParticleSystem"/> </para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToArray``1(``0[])">
            <summary>
            Cambia a un arreglo
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToKeyCode(System.String,System.Boolean)">
            <summary>
            Transform The string in keycode
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToColor(System.Int32[])">
            <summary>
             Set to color an array
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToVector(System.Single[])">
            <summary>
             Set a Vector with the float values
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToAxis(System.Single,System.Int32)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector3"/> with the axis
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.Axis(UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>
            Adjust the axis of a <see cref="T:UnityEngine.Vector3"/>
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToBool``1(``0)">
            <summary>
            Sets a bool
            </summary>
        </member>
        <member name="M:XavHelpTo.Change.Change.ToInt(System.Int32)">
            <summary>
            change the value to a binary result
            </summary>
        </member>
        <member name="T:XavHelpTo.Know.Know">
            <summary>
            Herramienta que devuelve valores booleanas o de indexación (hay excepciones..)
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsNull``1(``0)">
            <summary>
            Preguntamos si es nulo el valor indicado
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsEnum``1(``0)">
            <summary>
            Check if the value is an Enumerator
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsOnBounds(System.Int32,System.Int32)">
            <summary>
            Detecta si el indice está dentro del arreglo
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsEqualOf``1(``0,``0[])">
            <summary>
            Check if one of the values from the array are equal
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsEqualOf``1(``0[],``0[])">
            <summary>
            Check if exist a value same as the another array
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.CountOf``1(``0[],``0)">
            <summary>
            Counts how many slots of the same value exist in a array
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.Contains``1(``0[],``0[])">
            <summary>
            Check if all the values exist in vals without checking the order
            Return true if vals size is 0 or is not assigned
            return false if <seealso cref="!:values"/> is 0 length
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IndexOf``1(``0[],System.Int32,``0[])">
            <summary>
            Detecta el primer caracter de los buscados en el arreglo
            <para>Podemos tener un indice inicial</para>
            <para>Devuelve -1 si no encuentra</para>
            <para>Dependencia con <see cref="!:IsEqualOf(char, char[])"/> para hacer más de una busqueda</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.FirstMajor(System.Single,System.Single[])">
            <summary>
            Busca cual es el valor del arreglo que supera al indicado
            <para>Retorna -1 si no encuentra alguno mayor que el mostrado</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.NextIndex(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conoces el siguiente indice basado en la longitud del arreglo
            <para>Se le puede definir un inicio en caso de haber</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.DifferentIndex(System.Int32,System.Int32)">
            <summary>
            Retorna un valor distinto al ultimo suponiendo que la dimension es mayor a 1
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IndexsOfTag(System.String,System.Int32)">
            <summary>
            Devolvemos en un arreglo los 4 puntos para tomar una etiqueta. 
            <para>Estas etiqutas SOLO manejan 1 nivel de profundidad</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.Timer(System.Single,System.Single@)">
            <summary>
            Based on a cooldown who difference the next step and a time to store the qty
            <para>use the Timer</para>
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.TimerIn(System.Single,System.Single@,System.Boolean)">
            <summary>
            Based on a cooldown, updates the timer and returns true if pass the cooldown
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.TimerFlag(System.Single,System.Boolean@,System.Single@)">
            <summary>
            Permite activar el flag "can"___ para poder volver a usarlo, este se mide por tiempo
            </summary>
        </member>
        <member name="M:XavHelpTo.Know.Know.IsEmptyAnyChild(UnityEngine.Transform,System.Int32)">
            <summary>
            Find the index who does not contain any child
            returns -1 if is not finded a empty child
            </summary>
            <returns></returns>
        </member>
        <member name="T:XavHelpTo.Look.Look">
            <summary>
            Herramienta para facilitar a xavier su progreso en debug.
             Tambien está para visualizar cosas mejor.
             posee cosas esteticas....
            </summary>
        </member>
        <member name="M:XavHelpTo.Look.Look.InColor``1(``0,System.String)">
            <summary>
            Gets the value with a concrete color 
            </summary>
        </member>
        <member name="M:XavHelpTo.Look.Look.PrintColor``1(``0,System.String)">
            <summary>
            Pintamos un mensaje con color
            </summary>
        </member>
        <member name="M:XavHelpTo.Look.Look.Debugging(System.String)">
            <summary>
            Indicador decorativo de que andas debugeando algo, solo apoyo visual
            </summary>
        </member>
        <member name="M:XavHelpTo.Look.Look.RandomColor">
            <summary>
            Selector aleatorio de color, pretenden para debug, no para manejos de otras cosas..
            </summary>
        </member>
        <member name="M:XavHelpTo.Look.Look.Array``1(``0[])">
            <summary>
            Leemos en consola un arreglo de strings
            </summary>
        </member>
        <member name="T:ColorType">
            <summary>
            Identificador de los colores
            es solo un facilitador...
            </summary>
        </member>
    </members>
</doc>
